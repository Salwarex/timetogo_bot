from aiogram import types, F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove, CallbackQuery

import using.keyboards as kb
import config

import transport.parsing as prs

from aiogram.fsm.state import StatesGroup, State

router = Router()
choose = -1
last_route = ''

class ScheduleChoose(StatesGroup):
    route = State()
    stop_name = State()

class BackwardRoute(StatesGroup):
    route = State()
    check = State()

@router.message(Command("start"))
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç!\n–Ø - –ë–æ—Ç TimeToGo –∏ —è –æ—á–µ–Ω—å —Ö–æ—á—É –∑–∞—â–∏—Ç–∏—Ç—å —Ç–µ–±—è –æ—Ç –æ–ø–æ–∑–¥–∞–Ω–∏–π "
                         "–ø–æ –ø—Ä–∏—á–∏–Ω–µ –∑–∞–¥–µ—Ä–∂–∏–≤–∞—é—â–µ–≥–æ—Å—è –≥–æ—Ä–æ–¥—Å–∫–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞!\n\n –í–æ—Ç, —á—Ç–æ —è —É–º–µ—é", reply_markup=await kb.abilities())

@router.message(Command("stop"))
async def stop(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –±—ã–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã, –∞ –≤—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –º–µ–Ω—é!",
                         reply_markup=await kb.abilities())

@router.message(F.text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
@router.message(F.text == "–°–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫")
async def schedule_input_start(message : types.Message, state: FSMContext):
    print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
    global choose
    choose = kb.abilities_arr.index(message.text)
    await state.set_state(ScheduleChoose.route)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞—Ä—à—Ä—É—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –Ω—É–∂–µ–Ω!", reply_markup=ReplyKeyboardRemove())

@router.message(ScheduleChoose.route)
async def schedule_input_route(message: types.Message, state: FSMContext):
    global choose
    await state.update_data(route=message.text)
    await state.set_state(ScheduleChoose.stop_name)
    if choose != 3:
        await message.answer('–£–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏', reply_markup=kb.get_checkpoints)
    else:
        await state.update_data(stop_name="")
        data = await state.get_data()
        await state.clear()
        await checkpoints_list_output(message, data['route'], state)

@router.message(ScheduleChoose.stop_name)
async def schedule_input_name(message: types.Message, state: FSMContext):
    if message.text == '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫':
        data = await state.get_data()
        await checkpoints_list_output(message, data['route'], state)
    elif message.text == '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫ (–æ–±—Ä–∞—Ç–Ω—ã–π —Ä–µ–π—Å)':
        data = await state.get_data()
        await checkpoints_list_output(message, data['route'], state, 1)
    else:
        await state.update_data(stop_name=message.text)
        data = await state.get_data()
        await schedule_input_result(message, data)
        await state.clear()

async def checkpoints_list_output(message: types.Message, route: str, state: FSMContext, direction=0):
    loading_message = await message.answer_animation('https://media1.tenor.com/m/byY2-DioMQ4AAAAd/quirky-clown-bread-join-voice-call-vc.gif',caption='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∫–∞ —è —Å–æ–±–µ—Ä—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...')
    checkpoints = prs.Checkpoints(route=route, direction=direction).parse_checkpoints()
    checks_str = '\n'
    for check in checkpoints:
        if check != '':
            checks_str += f'üöè `{check}` \n\n'
    await loading_message.delete()
    await message.answer(f'üöç –í–æ—Ç –≤—Å—ë, —á—Ç–æ —è —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –ø–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º—É —Å–ø–∏—Å–∫—É –æ—Å—Ç–∞–Ω–æ–≤–æ–∫ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞ {route}:\n{checks_str} \n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –í–∞–º –Ω—É–∂–Ω–æ –µ–≥–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å', parse_mode="MarkdownV2")
    if (await state.get_state()) is not None:
        answer = None
        if direction == 0:
            answer = kb.get_checkpoints_back
        else:
            answer = ReplyKeyboardRemove()
        await message.answer('–ê —Ç–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏', reply_markup=answer)
    else:
        if direction == 0:
            global last_route
            last_route = route
            await message.answer('–ß—Ç–æ-—Ç–æ –µ—â—ë?', reply_markup=kb.get_checkpoints_back_plus)
        else:
            await message.answer('–ß—Ç–æ-—Ç–æ –µ—â—ë?', reply_markup=await kb.abilities())

@router.message(F.text == '–û–±—Ä–∞—Ç–Ω—ã–π —Ä–µ–π—Å')
async def backward_list_checking(message: types.Message, state: FSMContext):
    global last_route
    if last_route != '':
        await checkpoints_list_output(message, last_route, state, direction=1)

async def schedule_input_result(message: types.Message, data):
    global choose
    route = data['route']
    stop_name = data['stop_name']

    if choose == 0:
        await message.answer("–Ω–µ–¥–æ–¥–µ–ª–∞–Ω–æ;(")
    elif choose == 1:
        await message.answer("–Ω–µ–¥–æ–¥–µ–ª–∞–Ω–æ;(")
    elif choose == 2:
        await entire_schedule_output(message, route, stop_name)
    else:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!")
    choose = 0

async def entire_schedule_output(message: types.Message, route: str, stop_name: str):
    loading_message = await message.answer_animation('https://media1.tenor.com/m/byY2-DioMQ4AAAAd/quirky-clown-bread-join-voice-call-vc.gif',caption='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∫–∞ —è —Å–æ–±–µ—Ä—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...')
    schedule_items = prs.Schedule(route=route, stop_name=stop_name, time_sleep=config.PARSER_TIME_SLEEP).parse_schedule()
    schedule_str = ''
    i = 0
    for item in schedule_items:
        if isinstance(item, str):
            await loading_message.delete()
            await user_error_report(message, item)
            return
        else:
            #if (not(item.isPassed())) or (not(schedule_items[i+1].isPassed())):
            schedule_str += item.getMessage() + "\n\n"
            i+=1

    await loading_message.delete()
    await message.answer(f'üöç –í–æ—Ç –≤—Å—ë, —á—Ç–æ —è —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –ø–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –∞–≤—Ç–æ–±—É—Å–æ–≤ –º–∞—Ä—à—Ä—É—Ç–∞ {route} –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ {stop_name}: \n{schedule_str}', reply_markup=await kb.abilities())

async def user_error_report(message: types.Message, report : str):
    await message.answer_animation("https://media1.tenor.com/m/xJQzFjwewOkAAAAC/cat-gato.gif",
                                   caption=f'üö´ –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞! \n\n{report}')
